import { ReactNode } from 'react'
import ReactMarkdown from 'react-markdown'
import endent from 'endent'

export type CodeforcesTaskData = {
  code: string
  title: string
  link: string
  tags: string[]
  statement: ReactNode
  hints?: ReactNode[]
}

function markdown(strings: TemplateStringsArray, ...values: any[]) {
  return <ReactMarkdown>{endent(strings, ...values)}</ReactMarkdown>
}

const task4A: CodeforcesTaskData = {
  code: '4A',
  title: 'Арбуз',
  link: 'https://codeforces.com/problemset/problem/4/A',
  tags: ['Условия'],
  statement: markdown`
    Дано одно число N. Надо узнать, можно ли арбуз весом N килограмм разделить на две четные части.

    Например, арбуз весом шесть килограмм можно разделить на 2+4. Восемь килограмм — на 2+6 или 4+4. Семь килограмм — не получится.

    Если да — вывести \`YES\`, иначе — \`NO\`.
  `,
  hints: [
    markdown`
      Попробуйте для N от 1 до 10 и посмотрите, какая получается закономерность.
    `,
    markdown`
      Для решения понадобятся: \`if\`, \`%\`, \`===\`,\`!==\`, и \`&&\`. Про все эти штуки можно почитать в справке (см. поиск).
    `,
    markdown`
      Арбуз получится поделить, если его вес а) четный и б) не равен двум. (Два можно поделить только на 1+1.)
    `,
  ],
}

const task231A: CodeforcesTaskData = {
  code: '231A',
  title: 'Команда',
  link: 'https://codeforces.com/problemset/problem/231/A',
  tags: ['Условия', 'Цикл for'],
  statement: markdown`
    Дано число N. Дальше идет N строк, в каждой — три числа (\`0\` или \`1\`).
    
    Надо посчитать, сколько строк содержат *хотя бы* две единицы, и вывести их суммарное количество. Например:
      * \`0 0 1\` — не считается,
      * \`1 0 1\` — считается,
      * \`1 1 1\` — считается.
  `,
  hints: [
    markdown`
      Создайте переменную, в которой будет храниться количество хороших строк. Дальше читайте строки одну за одной с помощью цикла \`for\`. Если строка хорошая, увеличивайте переменную.
    `,
    markdown`
      Есть два способа проверить, хорошая ли строка:
        * можно написать условие вроде "если первое и второе число равны единице, или второе и третье, или первое и третье",
        * или можно просто сложить числа и посмотреть на их сумму.
    `,
  ],
}

const task282A: CodeforcesTaskData = {
  code: '282A',
  title: 'Bit++',
  link: 'https://codeforces.com/problemset/problem/282/A',
  tags: ['Условия', 'Цикл for'],
  statement: markdown`
    Есть переменная X, в которой в начале записан ноль.

    Еще есть четыре команды:
      * \`++X\` или \`X++\` — увеличить X на единицу,
      * \`--X\` или \`X--\` — уменьшить X на единицу.
    
    Никакой разницы между \`++X\` и \`X++\` нет, аналогично для \`--X\` и \`X--\`.
    
    Надо выполнить все команды и вывести значение X в конце.
  `,
  hints: [
    markdown`
      Создайте переменную, читайте команды в цикле \`for\` и выполняйте их.
    `,
    markdown`
      Чтобы выполнить команду, можно просто написать \`if\`. Например, \`if (s === '++X') { x++ }\`.
    `,
  ],
}

const task339A: CodeforcesTaskData = {
  code: '339A',
  title: 'Математика спешит на помощь',
  link: 'https://codeforces.com/problemset/problem/339/A',
  tags: ['Строки'],
  statement: markdown`
    Дана строка вида \`2+1+3+1+3\` (чисел может быть и больше пяти).

    Надо отсортировать числа по возрастанию. Например, из строки выше получится \`1+1+2+3+3\`.

    Числа в строке могут быть только \`1\`, \`2\` и \`3\`. Пробелов в строке нет.
  `,
  hints: [
    markdown`
      Есть два способа.
      
      1. Можно решить простыми операциями (\`.split\`, \`.join\`, \`.sort\`). Но для этого надо знать эти простые операции.

      2. Можно посчитать, сколько в строке единиц, двоек и троек (с помощью трех переменных), а потом вывести нужное количество цифр с помощью \`for\`.
    `,
  ],
}

const task71A: CodeforcesTaskData = {
  code: '71A',
  title: 'Слишком длинные слова',
  link: 'https://codeforces.com/problemset/problem/71/A',
  tags: ['Условия', 'Строки', 'Цикл for'],
  statement: markdown`
    Дано число N и потом N строк, в каждой — одно слово.

    Если в слове 10 символов или меньше, надо просто вывести само слово. Если больше — надо вывести первую и последнюю букву, а между ними — количество букв посередине.

    Например, вместо слова \`multitasking\` надо вывести \`m10g\`, потому что между \`m\` и \`g\` находится 10 букв.
  `,
  hints: [
    markdown`
      Чтобы узнать длину слова в переменной \`s\`, можно написать \`s.length\`.
    `,
    markdown`
      Первая буква слова — это \`s[0]\`. Последняя — \`s[s.length-1]\`.
    `,
    markdown`
      Склеить несколько вещей в одну строчку можно с помощью \`+\`.

      Но надо аккуратно. Например, если написать \`s[0] + s.length-2 + s[s.length-1]\`, получится \`NaN\`. Чтобы заработало, надо поставить скобки вокруг \`s.length-2\`.
    `,
  ],
}

export const codeforcesTasks: CodeforcesTaskData[] = [task4A, task231A, task71A, task282A, task339A]
