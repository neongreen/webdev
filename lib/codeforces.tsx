import { ReactNode } from 'react'
import ReactMarkdown from 'react-markdown'
import endent from 'endent'
import rehypeRaw from 'rehype-raw'
import { InlineMath } from 'react-katex'

export type CodeforcesTaskData = {
  code: string
  title: string
  link: string
  tags: string[]
  statement: ReactNode
  hints?: ReactNode[]
}

function markdown(strings: TemplateStringsArray, ...values: any[]) {
  return <ReactMarkdown rehypePlugins={[rehypeRaw]}>{endent(strings, ...values)}</ReactMarkdown>
}

const task4A: CodeforcesTaskData = {
  code: '4A',
  title: 'Арбуз',
  link: 'https://codeforces.com/problemset/problem/4/A',
  tags: ['Условия'],
  statement: markdown`
    Дано одно число N. Надо узнать, можно ли арбуз весом N килограмм разделить на две четные части.

    Например, арбуз весом шесть килограмм можно разделить на 2+4. Восемь килограмм — на 2+6 или 4+4. Семь килограмм — не получится.

    Если да — вывести \`YES\`, иначе — \`NO\`.
  `,
  hints: [
    markdown`
      Попробуйте для N от 1 до 10 и посмотрите, какая получается закономерность.
    `,
    markdown`
      Для решения понадобятся: \`if\`, \`%\`, \`===\`,\`!==\`, и \`&&\`. Про все эти штуки можно почитать в справке (см. поиск).
    `,
    markdown`
      Арбуз получится поделить, если его вес а) четный и б) не равен двум. (Два можно поделить только на 1+1.)
    `,
  ],
}

const task231A: CodeforcesTaskData = {
  code: '231A',
  title: 'Команда',
  link: 'https://codeforces.com/problemset/problem/231/A',
  tags: ['Условия', 'Цикл for'],
  statement: markdown`
    Дано число N. Дальше идет N строк, в каждой — три числа (\`0\` или \`1\`).
    
    Надо посчитать, сколько строк содержат *хотя бы* две единицы, и вывести их суммарное количество. Например:
      * \`0 0 1\` — не считается,
      * \`1 0 1\` — считается,
      * \`1 1 1\` — считается.
  `,
  hints: [
    markdown`
      Создайте переменную, в которой будет храниться количество хороших строк. Дальше читайте строки одну за одной с помощью цикла \`for\`. Если строка хорошая, увеличивайте переменную.
    `,
    markdown`
      Есть два способа проверить, хорошая ли строка:
        * можно написать условие вроде "если первое и второе число равны единице, или второе и третье, или первое и третье",
        * или можно просто сложить числа и посмотреть на их сумму.
    `,
  ],
}

const task282A: CodeforcesTaskData = {
  code: '282A',
  title: 'Bit++',
  link: 'https://codeforces.com/problemset/problem/282/A',
  tags: ['Условия', 'Цикл for'],
  statement: markdown`
    Есть переменная X, в которой в начале записан ноль.

    Еще есть четыре команды:
      * \`++X\` или \`X++\` — увеличить X на единицу,
      * \`--X\` или \`X--\` — уменьшить X на единицу.
    
    Никакой разницы между \`++X\` и \`X++\` нет, аналогично для \`--X\` и \`X--\`.
    
    Надо выполнить все команды и вывести значение X в конце.
  `,
  hints: [
    markdown`
      Создайте переменную, читайте команды в цикле \`for\` и выполняйте их.
    `,
    markdown`
      Чтобы выполнить команду, можно просто написать \`if\`. Например, \`if (s === '++X') { x++ }\`.
    `,
  ],
}

const task339A: CodeforcesTaskData = {
  code: '339A',
  title: 'Математика спешит на помощь',
  link: 'https://codeforces.com/problemset/problem/339/A',
  tags: ['Строки'],
  statement: markdown`
    Дана строка вида \`2+1+3+1+3\` (чисел может быть и больше пяти).

    Надо отсортировать числа по возрастанию. Например, из строки выше получится \`1+1+2+3+3\`.

    Числа в строке могут быть только \`1\`, \`2\` и \`3\`. Пробелов в строке нет.
  `,
  hints: [
    markdown`
      Есть два способа.
      
      1. Можно решить простыми операциями (\`.split\`, \`.join\`, \`.sort\`). Но для этого надо знать эти простые операции.

      2. Можно посчитать, сколько в строке единиц, двоек и троек (с помощью трех переменных), а потом вывести нужное количество цифр с помощью \`for\`.
    `,
  ],
}

const task71A: CodeforcesTaskData = {
  code: '71A',
  title: 'Слишком длинные слова',
  link: 'https://codeforces.com/problemset/problem/71/A',
  tags: ['Условия', 'Строки', 'Цикл for'],
  statement: markdown`
    Дано число N и потом N строк, в каждой — одно слово.

    Если в слове 10 символов или меньше, надо просто вывести само слово. Если больше — надо вывести первую и последнюю букву, а между ними — количество букв посередине.

    Например, вместо слова \`multitasking\` надо вывести \`m10g\`, потому что между \`m\` и \`g\` находится 10 букв.
  `,
  hints: [
    markdown`
      Чтобы узнать длину слова в переменной \`s\`, можно написать \`s.length\`.
    `,
    markdown`
      Первая буква слова — это \`s[0]\`. Последняя — \`s[s.length-1]\`.
    `,
    markdown`
      Склеить несколько вещей в одну строчку можно с помощью \`+\`.

      Но надо аккуратно. Например, если написать \`s[0] + s.length-2 + s[s.length-1]\`, получится \`NaN\`. Чтобы заработало, надо поставить скобки вокруг \`s.length-2\`.
    `,
  ],
}

const task1512A: CodeforcesTaskData = {
  code: '1512A',
  title: 'Шпион обнаружен!',
  link: 'https://codeforces.com/problemset/problem/1512/A',
  tags: ['Массивы', 'Условия', 'Цикл for'],
  statement: markdown`
    Дано несколько наборов чисел.
    
    В каждом наборе все числа одинаковые, кроме одного. Надо вывести номер этого числа (нумерация с 1).

    Например, когда даны числа \`3 3 3 10\`, надо вывести \`4\`, потому что отличается четвертое число.
  `,
  hints: [
    markdown`
      Чтобы найти отличающееся число, достаточно один раз пройтись по массиву циклом \`for\`.
    `,
    markdown`
      Можно точно узнать, отличающееся ли число, если сравнить его с соседями слева и справа.
    `,
  ],
}

const task58A: CodeforcesTaskData = {
  code: '58A',
  title: 'Чат',
  link: 'https://codeforces.com/problemset/problem/58/A',
  tags: ['Строки'],
  statement: markdown`
    Дана строка. Надо узнать, можно ли убрать из нее какие-то символы так, чтобы в итоге осталось слово \`hello\`.

    Например, для строк 
      <code style="font-size:115%"><u>h</u>a<u>e</u>a<u>l</u>a<u>l</u>a<u>o</u>a</code> или
      <code style="font-size:115%">a<u>h</u>h<u>e</u><u>l</u><u>l</u>lll<u>o</u>ou</code>
    ответ \`YES\`. (Подчеркнутое — символы, которые надо оставить.)
    
    Для строки 
      <code style="font-size:115%">hlelo</code>
    ответ \`NO\`.
  `,
  hints: [
    markdown`
      Есть два способа — а) с помощью обычных операций на строках, б) через регулярные выражения.

      С регулярными выражениями задача решается очень просто. Без них — придется написать несколько строчек кода.
    `,
    markdown`
      Решение без регулярных выражений выглядит так: будем искать буквы \`h\`, \`e\`, \`l\`, \`l\`, \`o\` по очереди. Когда мы нашли очередную букву, следующую можно искать только после нее в строке (а не с самого начала).

      Для такого решения понадобятся:
        * либо цикл \`for\` (который ходит по данной строке) и переменная, которая будет хранить текущую позицию в слове \`hello\`;
        * либо методы \`.indexOf\` и \`.slice\`.
    `,
  ],
}

const task189A: CodeforcesTaskData = {
  code: '189A',
  title: 'Разрежь ленточку',
  link: 'https://codeforces.com/problemset/problem/189/A',
  tags: ['Строки'],
  statement: markdown`
    Даны числа N (сумма) и A, B, C (возможные слагаемые). Все числа положительные. N не больше 4000.

    Надо найти **максимальное** количество слагаемых, на которые можно разбить N. Гарантируется, что это всегда можно сделать.

    Например:
      * если надо разбить 10 на 1, 2, 5, то ответ — 10 (десять единичек);
      * если надо разбить 10 на 5, 4, 3, то ответ — 3 (3+3+4).
    
    Саму сумму выдавать не нужно. Только максимальное количество слагаемых.
  `,
  hints: [
    markdown`
      В этой задаче важно то, что N не очень большое. Ее можно решить без математики.
    `,
    <>
      {markdown`Есть два решения.`}
      <p>
        Для одного придется перебрать <InlineMath math="N \times N" /> комбинаций (в худшем случае
        16 миллионов, компьютер успеет).
      </p>
      <p>
        Для другого — хватит одного цикла, который будет проходить до <InlineMath math="N" />, но
        его сложнее придумать. В общем случае это называется "метод динамического программирования".
      </p>
    </>,
    markdown`
      Если хотите решить задачу методом динамического программирования, то подумайте вот о чем: 
      
      _Если бы у вас уже были ответы для всех сумм от 1 до какого-то K, как бы вы могли их использовать, чтобы узнать ответ для суммы K+1?_
    `,
  ],
}

export const codeforcesTasks: CodeforcesTaskData[] = [
  task4A,
  task231A,
  task71A,
  task282A,
  task339A,
  task1512A,
  task58A,
  task189A,
]
